import fs from 'fs'
import path from 'path'

interface PackageJSON {
  name: string
  version: string
  description: string
  [key: string]: string | object
}

const error = (msg?: string) => {
  if (msg) console.error(msg)
  else console.error(`Usage: ${PACKAGE_NAME} [<key>] <filename>`)
  process.exit(1)
}

const PACKAGE_NAME = 'extract'

const KEYS = process.argv.slice(2)
if (KEYS.length < 2) error()

const FILENAME = KEYS.pop()?.replace(/^\.\/|\//, '') as string
if (!FILENAME) error()

const _tmp = fs.readFileSync(path.resolve('./package.json'), { encoding: 'utf-8' })
const json: PackageJSON = JSON.parse(_tmp)

const packagePath = path.resolve(`./${FILENAME}`)

const isESM = /\.tsx?|mjs$/.test(FILENAME)
const isCJS = /\.jsx?|cjs$/.test(FILENAME)
if (!isESM && !isCJS) error(`${PACKAGE_NAME}: File extension has to be .js .jsx .cjs .ts .tsx or .mjs`)

const dirname = path.dirname(FILENAME)

let output = `// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n`

const prepareOutput = (key: string) => {
  let value: any = json[key]
  const keys = key.split('.')

  if (keys.length >= 2) {
    key = keys[keys.length - 1]
    value = json[keys.shift() as string]

    keys.forEach(key => {
      value = value[`${key}`]
    })
  }

  // (\w = [a-zA-Z0-9_])
  key = key.toUpperCase() // to uppercase
  key = key.replace(/[-\s\\\/@]/gm, '_') // replace - space \ / and @ with _
  key = key.replace(/[^\w]/gm, '') // remove all special characters

  value = JSON.stringify(value, null, 2)

  const esm = `export const ${key} = ${value}`
  const cjs = `exports.${key} = ${value}`

  return isESM ? esm : cjs
}

KEYS.forEach(key => {
  output += prepareOutput(key) + `\n`
})

fs.mkdir(path.resolve(dirname), { recursive: true }, err => {
  if (err) error()

  fs.writeFile(packagePath, output, err => {
    if (err) error()
    process.exit(0)
  })
})
